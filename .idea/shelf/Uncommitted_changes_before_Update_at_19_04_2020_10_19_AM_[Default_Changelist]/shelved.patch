Index: test/Users/AssociationDelegateTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Users;\r\n\r\nimport League.League;\r\nimport Exception.*;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport system.SystemController;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class AssociationDelegateTest {\r\n    SystemController controller= new SystemController(\"test\");\r\n    AssociationDelegate a_s_Test = new AssociationDelegate(\"dani\" , \"dani@gmail.com\",\"123\");\r\n\r\n    @Before\r\n    public void init() throws IncorrectInputException, AlreadyExistException, DontHavePermissionException {\r\n        controller.signIn(a_s_Test.getName(),a_s_Test.getUserMail(),a_s_Test.getPassword());\r\n    }\r\n    @Test\r\n    public void getUserMail() {\r\n    }\r\n\r\n    @Test\r\n    public void getPassword() {\r\n    }\r\n\r\n    @Test\r\n    public void setUserMail() {\r\n    }\r\n\r\n    @Test\r\n    public void setPassword() {\r\n    }\r\n\r\n    @Test\r\n    public void getName() {\r\n    }\r\n\r\n    @Test\r\n    public void addLeagueAlreadyExistException() throws AlreadyExistException, DontHavePermissionException {\r\n        /* UC 19 (noa) */\r\n        /*init*/\r\n        League league1 = new League(\"champions\");\r\n        League league2 = new League(\"league2\");\r\n//        controller.addLeague(league1);\r\n//        controller.addLeague(league2);\r\n\r\n //       controller.setLeague(a_s_Test , league1);\r\n\r\n        //todo\r\n\r\n    }\r\n\r\n    @Test\r\n    public void setLeagueByYear() {\r\n        //UC20\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    public void signRefereeToSeason() {\r\n    }\r\n\r\n    @Test\r\n    public void insertSchedulingPolicy() {\r\n    }\r\n\r\n    @Test\r\n    public void changeScorePolicy() {\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/Users/AssociationDelegateTest.java	(revision 4c102f5b84791f009d190688c37d2021bab1c85e)
+++ test/Users/AssociationDelegateTest.java	(date 1587228379377)
@@ -1,11 +1,17 @@
 package Users;
 
 import League.League;
+import League.Season;
 import Exception.*;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import system.DBController;
 import system.SystemController;
 
+import java.util.HashSet;
+
 import static org.junit.Assert.*;
 
 public class AssociationDelegateTest {
@@ -13,63 +19,139 @@
     AssociationDelegate a_s_Test = new AssociationDelegate("dani" , "dani@gmail.com","123");
 
     @Before
-    public void init() throws IncorrectInputException, AlreadyExistException, DontHavePermissionException {
+    public void init() throws IncorrectInputException, AlreadyExistException, DontHavePermissionException, MemberNotExist, PasswordDontMatchException {
         controller.signIn(a_s_Test.getName(),a_s_Test.getUserMail(),a_s_Test.getPassword());
-    }
-    @Test
-    public void getUserMail() {
+        controller.logIn("admin@gmail.il","123");
     }
-
-    @Test
-    public void getPassword() {
-    }
-
-    @Test
-    public void setUserMail() {
-    }
-
+    @Rule
+    public final ExpectedException thrown= ExpectedException.none();
+/*******************************************************************************/
     @Test
-    public void setPassword() {
+    public void setLeague() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException {
+        controller.logIn("dani@gmail.com","123");
+
+
+        /* try to add league with valid details -result should be positive */
+        controller.setLeague("league");
     }
 
     @Test
-    public void getName() {
+    public void setLeagueAlreadyExistPermission() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException {
+        thrown.expect(DontHavePermissionException.class);
+
+        /* try to add league who without logIn -result should be negative */
+
+        controller.setLeague("league");
     }
-
     @Test
-    public void addLeagueAlreadyExistException() throws AlreadyExistException, DontHavePermissionException {
+    public void setLeagueAlreadyExistException() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException {
+        thrown.expect(AlreadyExistException.class);
         /* UC 19 (noa) */
         /*init*/
-        League league1 = new League("champions");
-        League league2 = new League("league2");
-//        controller.addLeague(league1);
-//        controller.addLeague(league2);
-
- //       controller.setLeague(a_s_Test , league1);
-
-        //todo
-
+        controller.logIn("dani@gmail.com","123");
+        controller.setLeague("league");
+        /* try to add league who already exist -result should be negative */
+        controller.setLeague("league");
     }
-
+/*******************************************************************************/
     @Test
-    public void setLeagueByYear() {
+    public void setLeagueByYear() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {
         //UC20
+        controller.logIn("dani@gmail.com","123");
+        controller.setLeague("league");
+        /* try to add referee with valid details -result should be positive */
+        controller.setLeagueByYear("league","2020");
+//       check if season is connect to league
+        boolean contains= false;
+        for (Season s: controller.getLeagues().get("league").getSeasons().keySet()) {
+            if(s.getYear().equals("2020")){
+                contains = true;
+            }
+        }
+        assertTrue(contains);
+    }
+    @Test
+    public void setLeagueByYearLeagueException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {
+        thrown.expect(ObjectNotExist.class);
+        controller.logIn("dani@gmail.com","123");
 
+        /* try to add referee with invalid league -result should be negative */
+        controller.setLeagueByYear("league","2020");
+    }
+    @Test
+    public void setLeagueByYearSeasonException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {
+        thrown.expect(AlreadyExistException.class);
+        controller.logIn("dani@gmail.com","123");
+        controller.setLeague("league");
+        controller.setLeagueByYear("league","2020");
 
+        /* try to add referee with valid league , invalid season -result should be negative */
+        controller.setLeagueByYear("league","2020");
+    }
+    /*******************************************************************************/
+    @Test
+    public void addRefereeToLeagueInSeason() throws IncorrectInputException, DontHavePermissionException, AlreadyExistException, MemberNotExist, PasswordDontMatchException, ObjectNotExist {
+        /* init - add referee , add league, add season */
+        controller.signIn("referee","referee@gmail.com","123");
+        controller.logIn("admin@gmail.com","123");
+        controller.addReferee("referee@gmail.com",false);
+        controller.logIn("dani@gmail.com","123");
+        assertTrue(controller.getRefereesDoesntExistInTheLeagueAndSeason("league","season").containsKey("referee@gmail.com"));
+        controller.setLeague("league");
+        controller.setLeagueByYear("league","2020");
+        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size();
 
 
+        /* try to add referee with valid details -result should be positive */
+        controller.addRefereeToLeagueInSeason("league","202","referee@gmail.com",null);
+        assertEquals(sizeBefore-1,controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size());
+        assertFalse(controller.getRefereesDoesntExistInTheLeagueAndSeason("league","season").containsKey("referee@gmail.com"));
 
     }
-
+    @Test
+    public void addRefereeToLeagueInSeasonPermission() {
+        thrown.expect(DontHavePermissionException.class);
+        controller.addRefereeToLeagueInSeason("league","season","referee",null);
+    }
     @Test
-    public void signRefereeToSeason() {
+    public void addRefereeToLeagueInSeasonLeagueException() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException, DontHavePermissionException, ObjectNotExist {
+        thrown.expect(ObjectNotExist.class);
+        /* init - add referee */
+        controller.signIn("referee","referee@gmail.com","123");
+        controller.logIn("admin@gmail.com","123");
+        controller.addReferee("referee@gmail.com",false);
+        controller.logIn("dani@gmail.com","123");
+        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size();
+
+        /* try to add referee to un valid league -result should be negative */
+        controller.addRefereeToLeagueInSeason("league0","2020","referee@gmail.com",null);
+        assertEquals(sizeBefore,controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size());
+
     }
-
+    @Test
+    public void addRefereeToLeagueInSeasonSeasonException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {
+        thrown.expect(ObjectNotExist.class);
+        /* init - add referee , add league */
+        controller.signIn("referee","referee@gmail.com","123");
+        controller.logIn("admin@gmail.com","123");
+        controller.addReferee("referee@gmail.com",false);
+        controller.logIn("dani@gmail.com","123");
+        controller.setLeague("league");
+        controller.setLeagueByYear("league","2020");
+        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size();
+
+
+        /* try to add referee to un valid season -result should be negative */
+        controller.addRefereeToLeagueInSeason("league","2021","referee@gmail.com",null);
+        assertEquals(sizeBefore,controller.getRefereesDoesntExistInTheLeagueAndSeason("league","2020").size());
+    }
+    /*******************************************************************************/
     @Test
     public void insertSchedulingPolicy() {
     }
-
+    /*******************************************************************************/
     @Test
     public void changeScorePolicy() {
     }
+
 }
\ No newline at end of file
Index: src/League/League.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package League;\r\n\r\nimport java.util.HashMap;\r\nimport Exception.*;\r\n\r\npublic class League {\r\n    private String name;\r\n    private HashMap<Season,LeagueInSeason> leagueInSeasons;\r\n\r\n    public League(String name) {\r\n        this.name = name;\r\n        leagueInSeasons=new HashMap<>();\r\n    }\r\n\r\n    public LeagueInSeason getLeagueInSeason(Season season) throws ObjectNotExist {\r\n        if(leagueInSeasons.containsKey(season))\r\n             return leagueInSeasons.get(season);\r\n        else\r\n            throw new ObjectNotExist(season.getYear());\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public void addLeagueInSeason(LeagueInSeason leagueInSeason){\r\n        if(leagueInSeason != null && !leagueInSeasons.containsKey(leagueInSeason.getSeason())){\r\n            leagueInSeasons.put(leagueInSeason.getSeason(), leagueInSeason);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/League/League.java	(revision 4c102f5b84791f009d190688c37d2021bab1c85e)
+++ src/League/League.java	(date 1587212840815)
@@ -1,6 +1,8 @@
 package League;
 
 import java.util.HashMap;
+import java.util.HashSet;
+
 import Exception.*;
 
 public class League {
@@ -28,4 +30,7 @@
             leagueInSeasons.put(leagueInSeason.getSeason(), leagueInSeason);
         }
     }
+    public HashMap<Season,LeagueInSeason> getSeasons(){
+        return this.leagueInSeasons;
+    }
 }
