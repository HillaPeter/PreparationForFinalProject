Index: test/Users/AssociationDelegateTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Users;\r\n\r\nimport Exception.*;\r\nimport League.Season;\r\nimport org.junit.Before;\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\nimport org.junit.rules.ExpectedException;\r\nimport system.SystemController;\r\n\r\nimport java.util.Date;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class AssociationDelegateTest {\r\n    Date birthdate=new Date(1993,10,12);\r\n    SystemController controller= new SystemController(\"test\");\r\n    AssociationDelegate a_s_Test = new AssociationDelegate(\"dani\" , \"dani@gmail.com\",\"123\", birthdate);\r\n\r\n    public AssociationDelegateTest() throws DontHavePermissionException, AlreadyExistException, MemberNotExist, IncorrectInputException {\r\n    }\r\n\r\n    @Before\r\n    public void init() throws IncorrectInputException, AlreadyExistException, DontHavePermissionException, MemberNotExist, PasswordDontMatchException {\r\n        controller.signIn(a_s_Test.getName(),a_s_Test.getUserMail(),a_s_Test.getPassword(), a_s_Test.getBirthDate());\r\n        controller.logIn(\"admin@gmail.com\",\"123\");\r\n        controller.addAssociationDelegate(this.a_s_Test.getUserMail());\r\n    }\r\n    @Rule\r\n    public final ExpectedException thrown= ExpectedException.none();\r\n    /*******************************************************************************/\r\n    @Test\r\n    public void setLeague() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException {\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n\r\n\r\n        /* try to add league with valid details -result should be positive */\r\n        controller.setLeague(\"league\");\r\n    }\r\n    @Test\r\n    public void setLeagueAlreadyExistPermission() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException {\r\n        thrown.expect(DontHavePermissionException.class);\r\n\r\n        /* try to add league who without logIn -result should be negative */\r\n\r\n        controller.setLeague(\"league\");\r\n    }\r\n    @Test\r\n    public void setLeagueAlreadyExistException() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException, DontHavePermissionException {\r\n        thrown.expect(AlreadyExistException.class);\r\n        /* UC 19 (noa) */\r\n        /*init*/\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        controller.setLeague(\"league\");\r\n        /* try to add league who already exist -result should be negative */\r\n        controller.setLeague(\"league\");\r\n    }\r\n    /*******************************************************************************/\r\n    @Test\r\n    public void setLeagueByYear() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {\r\n        //UC20\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        controller.setLeague(\"league\");\r\n\r\n\r\n        /* try to add referee with valid details -result should be positive */\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n//       check if season is connect to league\r\n        boolean contains= false;\r\n        for (Season s: controller.getLeagues().get(\"league\").getSeasons().keySet()) {\r\n            if(s.getYear().equals(\"2020\")){\r\n                contains = true;\r\n            }\r\n        }\r\n        assertTrue(contains);\r\n    }\r\n    @Test\r\n    public void setLeagueByYearLeagueException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {\r\n        thrown.expect(ObjectNotExist.class);\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n\r\n        /* try to add referee with invalid league -result should be negative */\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n    }\r\n    @Test\r\n    public void setLeagueByYearSeasonException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist {\r\n        thrown.expect(AlreadyExistException.class);\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        controller.setLeague(\"league\");\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n\r\n        /* try to add referee with valid league , invalid season -result should be negative */\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n    }\r\n    /*******************************************************************************/\r\n    @Test\r\n    public void addRefereeToLeagueInSeason() throws IncorrectInputException, DontHavePermissionException, AlreadyExistException, MemberNotExist, PasswordDontMatchException, ObjectNotExist, MemberAlreadyExistException {\r\n        /* init - add referee , add league, add season */\r\n        controller.logOut();\r\n        controller.signIn(\"referee\",\"referee@gmail.com\",\"123\", a_s_Test.getBirthDate());\r\n        controller.logIn(\"admin@gmail.com\",\"123\");\r\n        controller.addReferee(\"referee@gmail.com\",false);\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        assertTrue(controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"season\").containsKey(\"referee@gmail.com\"));\r\n        controller.setLeague(\"league\");\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size();\r\n\r\n\r\n        /* try to add referee with valid details -result should be positive */\r\n        controller.addRefereeToLeagueInSeason(\"league\",\"202\",\"referee@gmail.com\");\r\n        assertEquals(sizeBefore-1,controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size());\r\n        assertFalse(controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"season\").containsKey(\"referee@gmail.com\"));\r\n\r\n    }\r\n    @Test\r\n    public void addRefereeToLeagueInSeasonPermission() {\r\n        thrown.expect(DontHavePermissionException.class);\r\n        controller.addRefereeToLeagueInSeason(\"league\",\"season\",\"referee\");\r\n    }\r\n    @Test\r\n    public void addRefereeToLeagueInSeasonLeagueException() throws AlreadyExistException, IncorrectInputException, MemberNotExist, PasswordDontMatchException, DontHavePermissionException, ObjectNotExist, MemberAlreadyExistException {\r\n        thrown.expect(ObjectNotExist.class);\r\n        /* init - add referee */\r\n        controller.logOut();\r\n        controller.signIn(\"referee\",\"referee@gmail.com\",\"123\", a_s_Test.getBirthDate());\r\n        controller.logIn(\"admin@gmail.com\",\"123\");\r\n        controller.addReferee(\"referee@gmail.com\",false);\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size();\r\n\r\n        /* try to add referee to un valid league -result should be negative */\r\n        controller.addRefereeToLeagueInSeason(\"league0\",\"2020\",\"referee@gmail.com\");\r\n        assertEquals(sizeBefore,controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size());\r\n\r\n    }\r\n    @Test\r\n    public void addRefereeToLeagueInSeasonSeasonException() throws MemberNotExist, PasswordDontMatchException, AlreadyExistException, IncorrectInputException, DontHavePermissionException, ObjectNotExist, MemberAlreadyExistException {\r\n        thrown.expect(ObjectNotExist.class);\r\n        /* init - add referee , add league */\r\n        controller.logOut();\r\n        controller.signIn(\"referee\",\"referee@gmail.com\",\"123\", a_s_Test.getBirthDate());\r\n        controller.logIn(\"admin@gmail.com\",\"123\");\r\n        controller.addReferee(\"referee@gmail.com\",false);\r\n        controller.logOut();\r\n        controller.logIn(\"dani@gmail.com\",\"123\");\r\n        controller.setLeague(\"league\");\r\n        controller.setLeagueByYear(\"league\",\"2020\");\r\n        int sizeBefore = controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size();\r\n\r\n\r\n        /* try to add referee to un valid season -result should be negative */\r\n        controller.addRefereeToLeagueInSeason(\"league\",\"2021\",\"referee@gmail.com\");\r\n        assertEquals(sizeBefore,controller.getRefereesDoesntExistInTheLeagueAndSeason(\"league\",\"2020\").size());\r\n    }\r\n    /*******************************************************************************/\r\n    @Test\r\n    public void insertSchedulingPolicy() {\r\n    }\r\n    /*******************************************************************************/\r\n    @Test\r\n    public void changeScorePolicy() throws IncorrectInputException, ObjectNotExist {\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/Users/AssociationDelegateTest.java	(revision f211b0f360f20d8a173597b26211a114386e305a)
+++ test/Users/AssociationDelegateTest.java	(date 1587580348476)
@@ -163,6 +163,7 @@
     /*******************************************************************************/
     @Test
     public void insertSchedulingPolicy() {
+
     }
     /*******************************************************************************/
     @Test
Index: src/system/SystemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package system;\r\n\r\nimport Asset.Coach;\r\nimport Asset.Manager;\r\nimport Asset.Player;\r\nimport Game.Game;\r\nimport Game.Team;\r\nimport League.*;\r\nimport Users.*;\r\nimport Exception.*;\r\nimport javafx.util.Pair;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\n\r\npublic class SystemController {\r\n    private String name;\r\n    private Role connectedUser;\r\n    private DBController dbController;\r\n    //  private HashMap<Member,String> passwordValidation;\r\n\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * @param name\r\n     */\r\n    public SystemController(String name) {\r\n        this.name = name;\r\n        //this.initSystem(\"\", \"\", \"\"); // change it\r\n        try {\r\n            initSystem();\r\n        }catch (IncorrectInputException e) {\r\n\r\n        } catch (DontHavePermissionException e) {\r\n        }\r\n//        password verifications\r\n//        passwordValidation=new HashMap<>();\r\n//        for(Role r:roles){\r\n//            if(r instanceof Member){\r\n//                \r\n//            }\r\n//        }\r\n        //member = user; (argument in the constructor-Member user- Fan, Owner, AD, Referee...)\r\n    }\r\n\r\n    public void initSystem() throws IncorrectInputException, DontHavePermissionException {\r\n        //check if the user name and the password are connect\r\n        dbController = new DBController();\r\n        try{\r\n            Fan f = (Fan)signIn(\"admin\", \"admin@gmail.com\" , \"123\",new Date(1995,2,15));\r\n            SystemManager systemManager = new SystemManager(\"admin\", \"admin@gmail.com\", f.getPassword(), this.dbController ,new Date(1995,2,15) );\r\n            Role role=connectedUser;\r\n            connectedUser=systemManager;\r\n            this.addSystemManager(f.getUserMail());\r\n            connectedUser=role;\r\n\r\n        }catch (AlreadyExistException e){\r\n\r\n        } catch (MemberNotExist memberNotExist) {\r\n            memberNotExist.printStackTrace();\r\n        }\r\n        connectedUser = new Guest(dbController ,null);\r\n        System.out.println(\"Init System:\");\r\n        System.out.println(\"Connect to Security System\");\r\n        //todo\r\n    }\r\n\r\n    /*************************************** function for guest******************************************/\r\n    /**\r\n     * this function makes a Guest into a member\r\n     * if the member's mail doesnt exist -\r\n     * we will remove the Guest from the roles map and add create a Fan member by default and return true\r\n     * if the member's mail exist in the system - prints a error message and return false.\r\n     *\r\n     * @return true = success or false = failed to sign\r\n     */\r\n    public Member signIn(String userName, String userMail, String password , Date birthDate) throws IncorrectInputException, AlreadyExistException, DontHavePermissionException {\r\n        if(connectedUser==null)\r\n        {\r\n            Guest guest=new Guest(dbController,new Date(1,1,1));\r\n            return guest.signIn(userMail, userName, password , birthDate);\r\n        }\r\n        return ((Guest) connectedUser).signIn(userMail, userName, password , birthDate);\r\n\r\n    }\r\n    public Role logOut(){\r\n        //todo\r\n        this.connectedUser = new Guest(this.dbController , null);\r\n        return this.connectedUser;\r\n    }\r\n    /**\r\n     * this function makes a guest into an existing member.\r\n     * if the member doesnt exist - return null\r\n     * if the member exist - return the member\r\n     *\r\n     * @return\r\n     */\r\n    public Member logIn(String userMail, String userPassword) throws MemberNotExist, PasswordDontMatchException, DontHavePermissionException {\r\n        if(connectedUser==null)\r\n        {\r\n            Guest guest=new Guest(dbController,new Date(1995,2,1));\r\n            this.connectedUser=guest.logIn(userMail,userPassword);\r\n            return (Member) this.connectedUser;\r\n        }\r\n        this.connectedUser =((Guest)this.connectedUser).logIn(userMail, userPassword);\r\n        return (Member) this.connectedUser;\r\n    }\r\n    /*************************************** function for system manager******************************************/\r\n\r\n    public boolean removeAssociationDelegate(String id) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.removeAssociationDelegate(id);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public boolean removeOwner(String ownerId) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.removeOwner(ownerId);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public boolean removeSystemManager(String id) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.removeSystemManager(id);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public void addSystemManager(String id) throws DontHavePermissionException, MemberNotExist, AlreadyExistException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            systemManager.addSystemManager(id);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    /***\r\n     * this function get id of the refree to remove and the id of the system manager that take care of this function\r\n     * if the referee didnt exist - return false\r\n     * if the referee exist - delete it and return true\r\n     */\r\n    public boolean removeReferee(String refereeId) throws DontHavePermissionException, IncorrectInputException, MemberNotExist, AlreadyExistException {\r\n            if (connectedUser instanceof SystemManager) {\r\n                SystemManager systemManager = (SystemManager) connectedUser;\r\n                return systemManager.removeReferee(refereeId);\r\n            } else {\r\n                throw new DontHavePermissionException();\r\n            }\r\n        }\r\n    /***\r\n     * this function get id of the member to make referee and the id of the system manager that take care of this function\r\n     * if the referee already exist - return false\r\n     * if the referee not exist and success of adding it - add it and return true\r\n     */\r\n    public boolean addReferee(String refereeId, boolean ifMainReferee) throws DontHavePermissionException, MemberAlreadyExistException, AlreadyExistException, MemberNotExist, IncorrectInputException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.addReferee(refereeId, ifMainReferee);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n    /**\r\n     * this function get the team name and the id of the system manager that take care of this function\r\n     * if the team name already exist - close the team and return true\r\n     * if the team dont exist return false\r\n     *\r\n     * @param teamName\r\n     * @return\r\n     * @throws DontHavePermissionException\r\n     */\r\n    public boolean closeTeam(String teamName) throws DontHavePermissionException, ObjectNotExist, MemberNotExist, AlreadyExistException, IncorrectInputException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.closeTeam(teamName);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this function get the id of the member we want to delete and the id of the system manager that take care of this function\r\n     *\r\n     * @param id\r\n     * @return\r\n     * @throws DontHavePermissionException\r\n     */\r\n    public boolean removeMember(String id) throws DontHavePermissionException, MemberNotExist, IncorrectInputException, AlreadyExistException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.removeMember(id);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this function get the path to the complaint file and the id of the system manager that take care of this function\r\n     *\r\n     * @param path\r\n     * @throws DontHavePermissionException\r\n     */\r\n    public void watchComplaint(String path) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            LinkedList<String> complaint = systemManager.watchComplaint(path);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this function get the path to the complaint file , the response for the complaint and the id of the system manager that take care of this function\r\n     *\r\n     * @param path\r\n     * @param responseForComplaint\r\n     * @return\r\n     * @throws DontHavePermissionException\r\n     */\r\n    public boolean responseComplaint(String path, LinkedList<Pair<String, String>> responseForComplaint) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.ResponseComplaint(path, responseForComplaint);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public void schedulingGames(String seasonId, String leagueId) throws DontHavePermissionException, ObjectNotExist, IncorrectInputException {\r\n\r\n           if (connectedUser instanceof SystemManager) {\r\n               SystemManager systemManager = (SystemManager) connectedUser;\r\n               systemManager.schedulingGames(seasonId, leagueId);\r\n           } else {\r\n               throw new DontHavePermissionException();\r\n           }\r\n\r\n\r\n    }\r\n\r\n    public void viewSystemInformation(String path) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            systemManager.viewSystemInformation(path);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n//    /**\r\n//     * this function get the team name and all the team member and the id of the system manager that take care of this function\r\n//     * if the team name not exist - open the team and return true\r\n//     * if the team exist return false\r\n//     *\r\n//     * @param players\r\n//     * @param coachs\r\n//     * @param managers\r\n//     * @param owners\r\n//     * @param teamName\r\n//     * @return\r\n//     * @throws DontHavePermissionException\r\n//     */\r\n    /*\r\n    public boolean addTeam(LinkedList<String> players, LinkedList<String> coachs, LinkedList<String> managers, LinkedList<String> owners, String teamName) throws DontHavePermissionException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.addNewTeam(players, coachs, managers, owners, teamName);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n*/\r\n    public boolean addTeam(String teamName , String ownerId) throws DontHavePermissionException, ObjectNotExist, MemberNotExist, ObjectAlreadyExist, AlreadyExistException, IncorrectInputException {\r\n        if (connectedUser instanceof SystemManager) {\r\n            SystemManager systemManager = (SystemManager) connectedUser;\r\n            return systemManager.addNewTeam(teamName , ownerId);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public void addAssociationDelegate(String id) throws DontHavePermissionException, AlreadyExistException, MemberNotExist {\r\n        if(connectedUser instanceof SystemManager){\r\n            ((SystemManager)connectedUser).addAssociationDelegate(id);\r\n            return;\r\n        }\r\n        throw new DontHavePermissionException();\r\n    }\r\n\r\n    public void addOwner(String id) throws DontHavePermissionException, AlreadyExistException, MemberNotExist {\r\n        if(connectedUser instanceof SystemManager){\r\n            ((SystemManager)connectedUser).addOwner(id);\r\n            return;\r\n        }\r\n        throw new DontHavePermissionException();\r\n    }\r\n\r\n    /*************************************** function for owner******************************************/\r\n\r\n    /**\r\n     * owner:\r\n     * add a coach\r\n     *\r\n     * @param teamName\r\n     * @param mailId\r\n     * @throws NoEnoughMoney\r\n     */\r\n\r\n    public void addCoach(String teamName, String mailId) throws ObjectNotExist, NoEnoughMoney, MemberNotExist, AlreadyExistException, DontHavePermissionException {\r\n        if(!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam()-50 < 0)\r\n            throw new NoEnoughMoney();\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            throw new MemberNotExist();\r\n        if (dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            if(dbController.getCoaches(this.connectedUser).containsKey(mailId))\r\n               throw new AlreadyExistException();\r\n\r\n\r\n        ((Owner) connectedUser).addCoach(teamName, mailId);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add a player\r\n     *\r\n     * @param mailId\r\n     * @param teamName\r\n     * @param year\r\n     * @param month\r\n     * @param day\r\n     * @param rolePlayer\r\n     */\r\n    public void addPlayer(String mailId, String teamName, int year, int month, int day, String rolePlayer) throws ObjectNotExist, IncorrectInputException, MemberNotExist, AlreadyExistException, DontHavePermissionException, NoEnoughMoney {\r\n        if(!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam()-50 < 0)\r\n            throw new NoEnoughMoney();\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            throw new MemberNotExist();\r\n        if (dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            if(dbController.getPlayers(this.connectedUser).containsKey(mailId))\r\n                 throw new AlreadyExistException();\r\n        if(dbController.getTeams(this.connectedUser).get(teamName).getPlayers().contains(mailId))\r\n            throw new AlreadyExistException();\r\n\r\n        if (year < 0 || year > 2020 || month > 12 || month < 1 || day < 1 || day > 32 || rolePlayer == null || rolePlayer==\"\")\r\n            throw new IncorrectInputException();\r\n\r\n        ((Owner) connectedUser).addPlayer(teamName, mailId, year, month, day, rolePlayer);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add a field to list of training field of his team\r\n     *\r\n     * @param teamName\r\n     * @param fieldName\r\n     */\r\n    public void addField(String teamName, String fieldName) throws DontHavePermissionException, IncorrectInputException, AlreadyExistException, ObjectAlreadyExist, NoEnoughMoney, ObjectNotExist {\r\n        if(!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam()-50 < 0)\r\n            throw new NoEnoughMoney();\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getFieldFromTrainingFields(fieldName)!=null)\r\n            throw new ObjectAlreadyExist();\r\n        ((Owner) connectedUser).addField(teamName, fieldName);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add new manager to one of his groups\r\n     *\r\n     * @param teamName\r\n     * @param mailId\r\n     * @throws NoEnoughMoney\r\n     * @throws ObjectNotExist\r\n     */\r\n    public void addManager(String teamName, String mailId) throws NoEnoughMoney, ObjectNotExist, MemberNotExist, AlreadyExistException, DontHavePermissionException {\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            throw new MemberNotExist();\r\n        if (dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            if(dbController.getManagers(this.connectedUser).containsKey(mailId))\r\n                     throw new AlreadyExistException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam()-50 < 0)\r\n            throw new NoEnoughMoney();\r\n\r\n        ((Owner) connectedUser).addManager(teamName, mailId);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * removes a manager\r\n     *\r\n     * @param teamName\r\n     * @param mailToRemove\r\n     */\r\n    public void removeManager(String teamName, String mailToRemove) throws ObjectNotExist, MemberNotExist, AlreadyExistException, DontHavePermissionException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist \");\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailToRemove))\r\n            throw new MemberNotExist();\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailToRemove))\r\n            throw new ObjectNotExist(\"member not exist\");\r\n\r\n        ((Owner) connectedUser).removeManager(teamName, mailToRemove);\r\n\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * remove coach\r\n     *\r\n     * @param teamName\r\n     * @param mailToRemove\r\n     * @throws MemberNotExist\r\n     */\r\n    public void removeCoach(String teamName, String mailToRemove) throws ObjectNotExist, MemberNotExist, AlreadyExistException, DontHavePermissionException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getRoles(this.connectedUser).containsKey(connectedUser.getName()))\r\n            if(dbController.getCoaches(this.connectedUser).containsKey(mailToRemove))\r\n                 throw new DontHavePermissionException();\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailToRemove))\r\n            throw new MemberNotExist();\r\n\r\n        ((Owner) connectedUser).removeCoach(teamName, mailToRemove);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * remove player from team\r\n     *\r\n     * @param teamName\r\n     * @param mailToRemove\r\n     */\r\n    public void removePlayer(String teamName, String mailToRemove) throws DontHavePermissionException, ObjectNotExist, MemberNotExist, AlreadyExistException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if ((dbController.getRoles(this.connectedUser).containsKey(mailToRemove)))\r\n            if(!dbController.getPlayers(this.connectedUser).containsKey(mailToRemove))\r\n                  throw new MemberNotExist();\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailToRemove))\r\n            throw new MemberNotExist();\r\n\r\n        ((Owner) connectedUser).removePlayer(teamName, mailToRemove);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * removes a field\r\n     *\r\n     * @param teamName\r\n     * @param fieldName\r\n     */\r\n    public void removeField(String teamName, String fieldName) throws ObjectNotExist, DontHavePermissionException, MemberNotExist, IncorrectInputException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"\");\r\n        if(dbController.getTeams(this.connectedUser).get(teamName).getField(fieldName)==null)\r\n           throw new ObjectNotExist(\"field not exist\");\r\n        ((Owner) connectedUser).removeField(teamName, fieldName);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add new owner to one of his groups\r\n     *\r\n     * @param teamName\r\n     * @param mailId\r\n     * @throws NoEnoughMoney\r\n     * @throws ObjectNotExist\r\n     * @throws MemberNotExist\r\n     */\r\n    public void addNewOwner(String teamName, String mailId) throws NoEnoughMoney, ObjectNotExist, MemberNotExist, AlreadyExistException, DontHavePermissionException {\r\n        if (!dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            throw new MemberNotExist();\r\n        if (dbController.getRoles(this.connectedUser).containsKey(mailId))\r\n            if (dbController.getOwners(this.connectedUser).containsKey(mailId))\r\n                 throw new AlreadyExistException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam()-50 < 0)\r\n            throw new NoEnoughMoney();\r\n\r\n        ((Owner) connectedUser).addNewOwner(teamName, mailId);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * close team temporary\r\n     *\r\n     * @param teamName\r\n     * @throws ObjectNotExist\r\n     */\r\n    public void temporaryTeamClosing(String teamName) throws ObjectNotExist, DontHavePermissionException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        if (!((Owner) connectedUser).getTeams().containsKey(teamName))\r\n            throw new ObjectNotExist(\"team not exist\");\r\n        ((Owner) connectedUser).temporaryTeamClosing(teamName);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * reopen team\r\n     *\r\n     * @param teamName\r\n     * @throws ObjectNotExist\r\n     */\r\n    public void reopenClosedTeam(String teamName) throws ObjectNotExist, DontHavePermissionException {\r\n        if(! (this.connectedUser instanceof Owner))\r\n            throw new DontHavePermissionException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"\");\r\n        if (!((Owner) connectedUser).getTeams().containsKey(teamName))\r\n            throw new ObjectNotExist(\"\");\r\n        ((Owner) connectedUser).reopenClosedTeam(teamName);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add outcome of team\r\n     *\r\n     * @param teamName\r\n     * @throws NoEnoughMoney\r\n     * @throws ObjectNotExist\r\n     */\r\n    public void addOutCome(String teamName, String description, double amount) throws NoEnoughMoney, ObjectNotExist, AccountNotExist, IncorrectInputException, DontHavePermissionException {\r\n       if(!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n           throw new ObjectNotExist(\"team not exist\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam() - amount < 0)\r\n            throw new NoEnoughMoney();\r\n        if (description == null || description.equals(\"\") || amount < 0)\r\n            throw new IncorrectInputException();\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam() < 0)\r\n            throw new NoEnoughMoney();\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount() == null)\r\n            throw new AccountNotExist();\r\n\r\n        ((Owner) connectedUser).addOutCome(teamName, description, amount);\r\n    }\r\n\r\n    /**\r\n     * owner:\r\n     * add outcome of team\r\n     *\r\n     * @param teamName\r\n     * @throws NoEnoughMoney\r\n     * @throws ObjectNotExist\r\n     */\r\n    public void addInCome(String teamName, String description, double amount) throws NoEnoughMoney, ObjectNotExist, AccountNotExist, IncorrectInputException, DontHavePermissionException {\r\n        if (description == null || description.equals(\"\") || amount < 0)\r\n            throw new IncorrectInputException();\r\n        if (!dbController.getTeams(this.connectedUser).containsKey(teamName))\r\n            throw new ObjectNotExist(\"\");\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount().getAmountOfTeam() < 0)\r\n            throw new NoEnoughMoney();\r\n        if (dbController.getTeams(this.connectedUser).get(teamName).getAccount() == null)\r\n            throw new AccountNotExist();\r\n\r\n        ((Owner) connectedUser).addInCome(teamName, description, amount);\r\n    }\r\n\r\n\r\n    /********Getters for Owner & System manager********/\r\n    public HashMap<String, Role> getRoles() throws DontHavePermissionException {\r\n        if (connectedUser instanceof Owner) {\r\n            return ((Owner) connectedUser).getRoles();\r\n        }\r\n        if (connectedUser instanceof SystemManager) {\r\n            return ((SystemManager) connectedUser).getRoles();\r\n        }\r\n        throw new DontHavePermissionException();\r\n    }\r\n\r\n    public HashMap<String, Team> getTeams() {\r\n        try {\r\n            if (connectedUser instanceof Owner) {\r\n                return ((Owner) connectedUser).getTeams();\r\n            }\r\n            if (connectedUser instanceof SystemManager) {\r\n                return ((SystemManager) connectedUser).getTeams();\r\n            }\r\n            throw new DontHavePermissionException();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n\r\n        }\r\n        return new HashMap<>();\r\n    }\r\n\r\n    public void setMoneyToAccount(String teamName , double amount) throws ObjectNotExist, DontHavePermissionException {\r\n        if(! (connectedUser instanceof Owner) )\r\n            throw new DontHavePermissionException();\r\n        ((Owner)connectedUser).setMoneyToAccount(teamName,amount);\r\n    }\r\n\r\n    public double getAccountBalance(String teamName) throws DontHavePermissionException, ObjectNotExist {\r\n        if(! (connectedUser instanceof Owner) )\r\n            throw new DontHavePermissionException();\r\n        return ((Owner)connectedUser).getAccountBalance(teamName);\r\n    }\r\n    /*************************************** function for associationDelegate******************************************/\r\n\r\n    /**\r\n     * this\r\n     *\r\n     * @param\r\n     * @param leagueName\r\n     * @throws AlreadyExistException\r\n     */\r\n    public void setLeague(String leagueName) throws AlreadyExistException, IncorrectInputException {\r\n        try {\r\n            ((AssociationDelegate) connectedUser).setLeague(leagueName);\r\n        } catch (IncorrectInputException incorrectInput) {\r\n            throw new IncorrectInputException(leagueName);\r\n        } catch (AlreadyExistException alreadyExist) {\r\n            throw new AlreadyExistException();\r\n        } catch (Exception e) {\r\n\r\n        }\r\n    }\r\n\r\n    public void setLeagueByYear(String specificLeague, String year) throws ObjectNotExist, AlreadyExistException, DontHavePermissionException {\r\n        try {\r\n            ((AssociationDelegate) connectedUser).setLeagueByYear(specificLeague, year);\r\n        } catch (ObjectNotExist incorrectInput) {\r\n            throw new ObjectNotExist(incorrectInput.getMessage());\r\n        } catch (AlreadyExistException alreadyExist) {\r\n            throw new AlreadyExistException();\r\n        }\r\n    }\r\n\r\n    public HashMap<String, League> getLeagues() {\r\n        HashMap<String, League> leagues=new HashMap<String, League>();\r\n        try{\r\n            leagues = dbController.getLeagues(this.connectedUser);\r\n            throw new DontHavePermissionException();\r\n        }\r\n        catch(Exception e){\r\n        }\r\n        return leagues;\r\n    }\r\n\r\n    public HashMap<String, Referee> getRefereesDoesntExistInTheLeagueAndSeason(String league, String season) throws DontHavePermissionException {\r\n        HashMap<String, Referee> referees = new HashMap<>();\r\n        try {\r\n            referees = ((AssociationDelegate) connectedUser).getRefereesDoesntExistInTheLeagueAndSeason(league, season);\r\n\r\n        } catch (Exception e) {\r\n            throw new DontHavePermissionException();\r\n        }\r\n        return referees;\r\n    }\r\n\r\n    public void addRefereeToLeagueInSeason(String league, String season, String refereeToAdd) {\r\n        try{\r\n            ((AssociationDelegate)connectedUser).addRefereeToLeagueInSeason(league, season, refereeToAdd);\r\n        }\r\n        catch(Exception e){\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public HashMap<String, Season> getSeasons() {\r\n        HashMap<String, Season> seasons=new HashMap<String, Season>();\r\n        try{\r\n            seasons = dbController.getSeasons(this.connectedUser);\r\n            throw new DontHavePermissionException();\r\n        }catch(Exception e){\r\n\r\n        }\r\n        return seasons;\r\n    }\r\n\r\n    public void changeScorePolicy(String league, String season, String sWinning, String sDraw, String sLosing) throws ObjectNotExist, IncorrectInputException {\r\n        ((AssociationDelegate)connectedUser).changeScorePolicy(league, season, sWinning, sDraw, sLosing);\r\n    }\r\n\r\n    public HashMap<String, ASchedulingPolicy> getSchedulingPolicies() throws DontHavePermissionException{\r\n       return ((AssociationDelegate)connectedUser).getSchedulingPolicies();\r\n    }\r\n\r\n    public void addSchedulingPolicy(String policyName) throws IncorrectInputException, DontHavePermissionException {\r\n        ((AssociationDelegate)connectedUser).addSchedulingPolicy(policyName);\r\n    }\r\n    /*************************************** function for Referee ******************************************/\r\n    public void updateDetails(String newName, String newMail,String newPassword, String newTraining) throws IncorrectInputException, DontHavePermissionException, MemberNotExist, AlreadyExistException {\r\n        if (connectedUser instanceof MainReferee) {\r\n            MainReferee referee = (MainReferee) connectedUser;\r\n            referee.updateDetails(newName, newMail, newPassword, newTraining);\r\n        }\r\n        else if (connectedUser instanceof SecondaryReferee) {\r\n            SecondaryReferee referee = (SecondaryReferee) connectedUser;\r\n            referee.updateDetails(newName, newMail, newPassword, newTraining);\r\n        }\r\n        else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public LinkedList<Game> getEditableGames () throws DontHavePermissionException {\r\n        if (connectedUser instanceof MainReferee) {\r\n            MainReferee mainReferee = (MainReferee) connectedUser;\r\n            return mainReferee.getEditableGames ();\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public HashSet<Game> getGameSchedule() throws DontHavePermissionException {\r\n        if (connectedUser instanceof Referee) {\r\n            Referee referee = (Referee) connectedUser;\r\n            return referee.getGameSchedule();\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public void updateGameEvent(Game game){\r\n\r\n    }\r\n\r\n    public void getGameReport(){\r\n        //todo\r\n    }\r\n\r\n    /*************************************** function for Fan ******************************************/\r\n\r\n    public void updatePersonalDetails(String newName, String newPassword, String newMail) throws DontHavePermissionException, IncorrectInputException, MemberNotExist, AlreadyExistException {\r\n        if (connectedUser instanceof Fan) {\r\n            Fan fan = (Fan) connectedUser;\r\n            fan.updatePersonalDetails(newName, newPassword, newMail);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n    public void sendComplaint (String path, String complaint) throws DontHavePermissionException {\r\n        if (connectedUser instanceof Fan) {\r\n            Fan fan = (Fan) connectedUser;\r\n            fan.sendComplaint(path, complaint);\r\n        } else {\r\n            throw new DontHavePermissionException();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /*************************************************************************************************************/\r\n\r\n    public HashMap<String, Fan> getFans(Role role) throws DontHavePermissionException {\r\n        return dbController.getFans(role);\r\n    }\r\n\r\n    public HashMap<String, Referee> getReferees(Role role) throws DontHavePermissionException {\r\n        return dbController.getReferees(role);\r\n    }\r\n\r\n    public HashMap<String, Player> getPlayers(Role role) throws DontHavePermissionException {\r\n        return dbController.getPlayers(role);\r\n    }\r\n\r\n    public HashMap<String, Owner> getOwners(Role role) throws DontHavePermissionException {\r\n        return dbController.getOwners(role);\r\n    }\r\n\r\n    public HashMap<String, Manager> getManagers(Role role) throws DontHavePermissionException {\r\n        return dbController.getManagers(role);\r\n    }\r\n\r\n    public HashMap<String, Coach> getCoach(Role role) throws DontHavePermissionException {\r\n        return dbController.getCoaches(role);\r\n    }\r\n\r\n    public HashMap<String,Member> getMembers(Role role) throws DontHavePermissionException {\r\n        return dbController.getMembers(role);\r\n    }\r\n\r\n    public void setSchedulingPolicyToLeagueInSeason(String specificLeague, String year, String policy) throws IncorrectInputException, ObjectNotExist, DontHavePermissionException {\r\n        ((AssociationDelegate)connectedUser).setSchedulingPolicyToLeagueInSeason(specificLeague, year, policy);\r\n    }\r\n\r\n    public DBController getDbController() {\r\n        return dbController;\r\n    }\r\n\r\n    public HashMap<String, SystemManager> getSystemManager(Role role) throws DontHavePermissionException {\r\n        return dbController.getSystemManagers(role);\r\n    }\r\n\r\n    public HashMap<String, AssociationDelegate> getAssociationDelegates(Role role) throws DontHavePermissionException {\r\n        return dbController.getAssociationDelegate(role);\r\n    }\r\n\r\n\r\n    public HashMap<String, Role> getOwnersAndFans(Role role) throws DontHavePermissionException {\r\n        return dbController.getOwnersAndFans(role);\r\n    }\r\n\r\n\r\n    /**********shachar test*************/\r\n    /*\r\n    public void addPlayer(Player player1) throws AlreadyExistException {\r\n        dbController.addPlayer(player1);\r\n    }\r\n\r\n    public void addCoach(Coach coach1) throws AlreadyExistException {\r\n        dbController.addCoach(coach1);\r\n    }\r\n\r\n    public void addManager(Manager manager1) throws AlreadyExistException {\r\n        dbController.addManager(manager1);\r\n    }\r\n\r\n    public void addOwner(Owner owner1) throws AlreadyExistException, DontHavePermissionException {\r\n        dbController.addOwner(connectedUser,owner1);\r\n    }\r\n\r\n    public void addSystemManager(SystemManager systemManager) throws AlreadyExistException {\r\n        dbController.addSystemManager(systemManager);\r\n    }\r\n\r\n    public void addFan(Fan fan1) {\r\n        dbController.addFan(fan1);\r\n    }\r\n    */\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/system/SystemController.java	(revision f211b0f360f20d8a173597b26211a114386e305a)
+++ src/system/SystemController.java	(date 1587573033437)
@@ -829,7 +829,6 @@
         return dbController.getOwnersAndFans(role);
     }
 
-
     /**********shachar test*************/
     /*
     public void addPlayer(Player player1) throws AlreadyExistException {
